#! /usr/bin/env python
PACKAGE='hector_exploration_planner'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# weighing factor that determines how safe a path is. Close proximity is punished with higher values. Possibility to avoid narrow passages. 0.5, 0.0, 10000.0
gen.add("security_constant", double_t, 0, "security_constant", 0.5, 0.0, 10000.0)

#The closest the robot will get to an obstacle. 10, 0, 1000
gen.add("min_obstacle_dist", int_t, 0, "min_obstacle_dist", 10, 0, 1000)

#Planned paths can go through unknown space. True
gen.add("plan_in_unknown", bool_t, 0, "plan_in_unknown", True)

#True
gen.add("explore_close_to_path", bool_t, 0, "explore_close_to_path", True)

#Inflate the detected obstacles with dimension of robot in path planning space to avoid obstacles. True
gen.add("use_inflated_obstacles", bool_t, 0, "use_inflated_obstacle", True)

#Penalty given to angles required to follow a path. 50, 0, 10000
gen.add("goal_angle_penalty", int_t, 0, "goal_angle_penalty", 80, 0, 10000)

#Frontiers less than this size are discounted. 5, 0, 1000
gen.add("min_frontier_size", int_t, 0, "min_frontier_size", 5, 0, 1000)

#Distance from goal to be considered reached. 0.25, 0.0, 10.0
gen.add("dist_for_goal_reached", double_t, 0, "dist_for_goal_reached", 0.25, 0.0, 10.0)

#Tolerance in calculating if the frontier is the same? 0.25, 0.0, 10.0
gen.add("same_frontier_distance", double_t, 0, "same_frontier_distance", 0.25, 0.0, 10.0)

#Possibly cutoff distance for path close to frontier. 1.0, 0.0, 100.0
gen.add("obstacle_cutoff_distance", double_t, 0, "obstacle_cutoff_distance", 1.0, 0.0, 100.0)

#Use observed pose from costmap? True
gen.add("use_observation_pose_calculation", bool_t, 0, "use observation pose calculation", True)

#Possibly the desired length of the path? Possibly tolerance between estimated and observed poses? 0.5, 0.0, 10.0
gen.add("observation_pose_desired_dist", double_t, 0, "Observation pose desired distance", 0.5, 0.0, 10.0)

#See above. 135.0, 0.0, 360.0
gen.add("observation_pose_allowed_angle", double_t, 0, "allowed angle for observation pose adjustment [deg]", 135.0, 0.0, 360.0)

#How close to stay to path? 1.2, 0.0, 10.0
gen.add("close_to_path_target_distance", double_t, 0, "close to path exploration target distance", 1.2, 0.0, 10.0)


exit(gen.generate(PACKAGE, "hector_exploration_planner", "ExplorationPlanner"))
